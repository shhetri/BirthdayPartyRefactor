/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package scrap.heap.refactor.processor;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import scrap.heap.refactor.dispatcher.IOrderDispatcher;
import scrap.heap.refactor.model.Cake;
import scrap.heap.refactor.model.Orderable;
import java.util.Arrays;

import static org.mockito.Mockito.*;

public class OrderProcessorTest {
    @Mock
    IOrderDispatcher mOrderDispatcher;

    private OrderProcessor mSubject;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        mSubject = new OrderProcessor(mOrderDispatcher);
    }

    @Test
    public void testItProcessOrders() {
        Orderable chocolateCake = new Cake.Builder()
                .setFlavor(Cake.Flavor.CHOCOLATE)
                .setFrostingFlavor(Cake.Flavor.CHOCOLATE)
                .setShape(Cake.Shape.CIRCLE)
                .setSize(Cake.Size.LARGE)
                .setColor(Cake.Color.BROWN)
                .build();
        Orderable vanillaCake = new Cake.Builder()
                .setFlavor(Cake.Flavor.VANILLA)
                .setFrostingFlavor(Cake.Flavor.CHOCOLATE)
                .setShape(Cake.Shape.CIRCLE)
                .setSize(Cake.Size.LARGE)
                .setColor(Cake.Color.BROWN)
                .build();
        mSubject.addItems(chocolateCake, vanillaCake);
        mSubject.processOrder();

        ArgumentCaptor<String> argumentCaptor = new ArgumentCaptor<>();
        verify(mOrderDispatcher, times(2)).dispatchOrder(argumentCaptor.capture());
        Assert.assertEquals(argumentCaptor.getAllValues(), Arrays.asList(chocolateCake.getOrderData(), vanillaCake.getOrderData()));
    }
}
